names(network_database_linear_model)[2] <- "DayOfWeek"
network_database_linear_model[[3]] <- network_database[[3]]
names(network_database_linear_model)[3] <- "StartTime"
temp_vector <- c()
for (i in 1:length(network_database[[4]])){
if (network_database[[4]][i] == "work_flow_0"){
temp_vector <- append(temp_vector, 1)
}
if (network_database[[4]][i] == "work_flow_1"){
temp_vector <- append(temp_vector, 2)
}
if (network_database[[4]][i] == "work_flow_2"){
temp_vector <- append(temp_vector, 3)
}
if (network_database[[4]][i] == "work_flow_3"){
temp_vector <- append(temp_vector, 4)
}
if (network_database[[4]][i] == "work_flow_4"){
temp_vector <- append(temp_vector, 5)
}
}
network_database_linear_model[[4]] <- temp_vector
names(network_database_linear_model)[4] <- "WorkFlowName"
temp_vector <- c()
for (i in 1:length(network_database[[5]])){
if (network_database[[5]][i] == "File_0"){
temp_vector <- append(temp_vector, 1)
}
if (network_database[[5]][i] == "File_1"){
temp_vector <- append(temp_vector, 2)
}
if (network_database[[5]][i] == "File_2"){
temp_vector <- append(temp_vector, 3)
}
if (network_database[[5]][i] == "File_3"){
temp_vector <- append(temp_vector, 4)
}
if (network_database[[5]][i] == "File_4"){
temp_vector <- append(temp_vector, 5)
}
if (network_database[[5]][i] == "File_5"){
temp_vector <- append(temp_vector, 6)
}
if (network_database[[5]][i] == "File_6"){
temp_vector <- append(temp_vector, 7)
}
if (network_database[[5]][i] == "File_7"){
temp_vector <- append(temp_vector, 8)
}
if (network_database[[5]][i] == "File_8"){
temp_vector <- append(temp_vector, 9)
}
if (network_database[[5]][i] == "File_9"){
temp_vector <- append(temp_vector, 10)
}
if (network_database[[5]][i] == "File_10"){
temp_vector <- append(temp_vector, 11)
}
if (network_database[[5]][i] == "File_11"){
temp_vector <- append(temp_vector, 12)
}
if (network_database[[5]][i] == "File_12"){
temp_vector <- append(temp_vector, 13)
}
if (network_database[[5]][i] == "File_13"){
temp_vector <- append(temp_vector, 14)
}
if (network_database[[5]][i] == "File_14"){
temp_vector <- append(temp_vector, 15)
}
if (network_database[[5]][i] == "File_15"){
temp_vector <- append(temp_vector, 16)
}
if (network_database[[5]][i] == "File_16"){
temp_vector <- append(temp_vector, 17)
}
if (network_database[[5]][i] == "File_17"){
temp_vector <- append(temp_vector, 18)
}
if (network_database[[5]][i] == "File_18"){
temp_vector <- append(temp_vector, 19)
}
if (network_database[[5]][i] == "File_19"){
temp_vector <- append(temp_vector, 20)
}
if (network_database[[5]][i] == "File_20"){
temp_vector <- append(temp_vector, 21)
}
if (network_database[[5]][i] == "File_21"){
temp_vector <- append(temp_vector, 22)
}
if (network_database[[5]][i] == "File_22"){
temp_vector <- append(temp_vector, 23)
}
if (network_database[[5]][i] == "File_23"){
temp_vector <- append(temp_vector, 24)
}
if (network_database[[5]][i] == "File_24"){
temp_vector <- append(temp_vector, 25)
}
if (network_database[[5]][i] == "File_25"){
temp_vector <- append(temp_vector, 26)
}
if (network_database[[5]][i] == "File_26"){
temp_vector <- append(temp_vector, 27)
}
if (network_database[[5]][i] == "File_27"){
temp_vector <- append(temp_vector, 28)
}
if (network_database[[5]][i] == "File_28"){
temp_vector <- append(temp_vector, 29)
}
if (network_database[[5]][i] == "File_29"){
temp_vector <- append(temp_vector, 30)
}
}
network_database_linear_model[[5]] <- temp_vector
names(network_database_linear_model)[5] <- "FileName"
network_database_linear_model[[6]] <- network_database[[6]]
names(network_database_linear_model)[6] <- "SizeBackup"
network_database_linear_model[[7]] <- network_database[[7]]
names(network_database_linear_model)[7] <- "TimeBackup"
#
#####################################################
data_network_database <- data.frame(matrix(unlist(network_database_linear_model), ncol=7))
for (j in 1:7){
if (j == 1){
names(data_network_database)[j] <- "Week"
} else if (j == 2){
names(data_network_database)[j] <- "DayOfWeek"
} else if (j == 3){
names(data_network_database)[j] <- "StartTime"
} else if (j == 4){
names(data_network_database)[j] <- "WorkFlowName"
} else if (j == 5){
names(data_network_database)[j] <- "FileName"
} else if (j == 6){
names(data_network_database)[j] <- "SizeBackup"
} else if (j == 7){
names(data_network_database)[j] <- "TimeBackup"
}
}
# reference https://gist.github.com/bhoung/11237681
fold_num = 10 #Folds
# sample from 1 to fold_num, nrow times (the number of observations in the data)
data_network_database$id <- sample(1:fold_num, nrow(data_network_database), replace = TRUE)
list <- 1:fold_num
# prediction and testset data frames that we add to with each iteration over
# the folds
prediction_linear <- data.frame()
testsetCopy_linear <- data.frame()
fit_linear_copy <- data.frame()
prediction_randomForest <- data.frame()
testsetCopy_randomForest <- data.frame()
fit_randomForest_copy <- data.frame()
result_temp_linear <- data.frame()
result_temp_randomForest <- data.frame()
for (i in 1:fold_num){
# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- subset(data_network_database, id %in% list[-i])
testset <- subset(data_network_database, id %in% c(i))
# run a linear regression model
fit_linear <- lm(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data=trainingset)
#fit_randomForest <- rfsrc(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 20, nodedepth = 4)
fit_randomForest <- randomForest(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 100, mtry = 6, nodesize = 64)
temp_prediction_linear <- as.data.frame(predict(fit_linear, testset[,-6]))
temp_prediction_randomForest <- as.data.frame(predict(fit_randomForest, testset[,-6]))
# append this iteration's predictions to the end of the prediction_linear data frame
prediction_linear <- rbind(prediction_linear , temp_prediction_linear)
prediction_randomForest <- rbind(prediction_randomForest , temp_prediction_randomForest)
# append this iteration's test set to the test set copy data frame
# keep only the Sepal Length Column
testsetCopy_linear <- rbind(testsetCopy_linear, as.data.frame(testset[,6]))
testsetCopy_randomForest <- rbind(testsetCopy_randomForest, as.data.frame(testset[,6]))
# fit_linear_copy <- cbind(fit_linear_copy, fit_linear)
cat("===========================================\n")
cat(sprintf("No.%d\n", i))
cat(sprintf("fit_linear coefficients:\n"))
print(fit_linear$coefficients)
result_temp_linear <- cbind(temp_prediction_linear, as.data.frame(testset[,6]))
names(result_temp_linear) <- c("Predicted", "Actual")
result_temp_linear$Difference <- abs(result_temp_linear$Actual - result_temp_linear$Predicted) ^ 2
cat(sprintf("Linear Model: The sum of the square of difference is %f\n",sum(result_temp_linear$Difference)))
result_temp_randomForest <- cbind(temp_prediction_randomForest, as.data.frame(testset[,6]))
names(result_temp_randomForest) <- c("Predicted", "Actual")
result_temp_randomForest$Difference <- abs(result_temp_randomForest$Actual - result_temp_randomForest$Predicted) ^ 2
cat(sprintf("Random Forest Model: The sum of the square of difference is %f\n",sum(result_temp_randomForest$Difference)))
}
#####################################################
#
#   10 folds
#   Begin
#
#####################################################
data_network_database <- data.frame(matrix(unlist(network_database_linear_model), ncol=7))
for (j in 1:7){
if (j == 1){
names(data_network_database)[j] <- "Week"
} else if (j == 2){
names(data_network_database)[j] <- "DayOfWeek"
} else if (j == 3){
names(data_network_database)[j] <- "StartTime"
} else if (j == 4){
names(data_network_database)[j] <- "WorkFlowName"
} else if (j == 5){
names(data_network_database)[j] <- "FileName"
} else if (j == 6){
names(data_network_database)[j] <- "SizeBackup"
} else if (j == 7){
names(data_network_database)[j] <- "TimeBackup"
}
}
# reference https://gist.github.com/bhoung/11237681
fold_num = 10 #Folds
# sample from 1 to fold_num, nrow times (the number of observations in the data)
data_network_database$id <- sample(1:fold_num, nrow(data_network_database), replace = TRUE)
list <- 1:fold_num
# prediction and testset data frames that we add to with each iteration over
# the folds
prediction_linear <- data.frame()
testsetCopy_linear <- data.frame()
fit_linear_copy <- data.frame()
prediction_randomForest <- data.frame()
testsetCopy_randomForest <- data.frame()
fit_randomForest_copy <- data.frame()
result_temp_linear <- data.frame()
result_temp_randomForest <- data.frame()
for (i in 1:fold_num){
# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- subset(data_network_database, id %in% list[-i])
testset <- subset(data_network_database, id %in% c(i))
# run a linear regression model
fit_linear <- lm(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data=trainingset)
#fit_randomForest <- rfsrc(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 20, nodedepth = 4)
fit_randomForest <- randomForest(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 100, mtry = 6, nodesize = 64)
temp_prediction_linear <- as.data.frame(predict(fit_linear, testset[,-6]))
temp_prediction_randomForest <- as.data.frame(predict(fit_randomForest, testset[,-6]))
# append this iteration's predictions to the end of the prediction_linear data frame
prediction_linear <- rbind(prediction_linear , temp_prediction_linear)
prediction_randomForest <- rbind(prediction_randomForest , temp_prediction_randomForest)
# append this iteration's test set to the test set copy data frame
# keep only the Sepal Length Column
testsetCopy_linear <- rbind(testsetCopy_linear, as.data.frame(testset[,6]))
testsetCopy_randomForest <- rbind(testsetCopy_randomForest, as.data.frame(testset[,6]))
# fit_linear_copy <- cbind(fit_linear_copy, fit_linear)
cat("===========================================\n")
cat(sprintf("No.%d\n", i))
cat(sprintf("fit_linear coefficients:\n"))
print(fit_linear$coefficients)
result_temp_linear <- cbind(temp_prediction_linear, as.data.frame(testset[,6]))
names(result_temp_linear) <- c("Predicted", "Actual")
result_temp_linear$Difference <- abs(result_temp_linear$Actual - result_temp_linear$Predicted) ^ 2
cat(sprintf("Linear Model: The sum of the square of difference is %f\n",sum(result_temp_linear$Difference)))
prediction_linear <- data.frame()
testsetCopy_linear <- data.frame()
fit_linear_copy <- data.frame()
prediction_randomForest <- data.frame()
testsetCopy_randomForest <- data.frame()
fit_randomForest_copy <- data.frame()
result_temp_linear <- data.frame()
result_temp_randomForest <- data.frame()
for (i in 1:fold_num){
# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- subset(data_network_database, id %in% list[-i])
testset <- subset(data_network_database, id %in% c(i))
# run a linear regression model
fit_linear <- lm(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data=trainingset)
#fit_randomForest <- rfsrc(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 20, nodedepth = 4)
fit_randomForest <- randomForest(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 100, mtry = 6, nodesize = 64)
temp_prediction_linear <- as.data.frame(predict(fit_linear, testset[,-6]))
temp_prediction_randomForest <- as.data.frame(predict(fit_randomForest, testset[,-6]))
# append this iteration's predictions to the end of the prediction_linear data frame
prediction_linear <- rbind(prediction_linear , temp_prediction_linear)
prediction_randomForest <- rbind(prediction_randomForest , temp_prediction_randomForest)
# append this iteration's test set to the test set copy data frame
# keep only the Sepal Length Column
testsetCopy_linear <- rbind(testsetCopy_linear, as.data.frame(testset[,6]))
testsetCopy_randomForest <- rbind(testsetCopy_randomForest, as.data.frame(testset[,6]))
# fit_linear_copy <- cbind(fit_linear_copy, fit_linear)
cat("===========================================\n")
cat(sprintf("No.%d\n", i))
cat(sprintf("fit_linear coefficients:\n"))
print(fit_linear$coefficients)
result_temp_linear <- cbind(temp_prediction_linear, as.data.frame(testset[,6]))
names(result_temp_linear) <- c("Predicted", "Actual")
result_temp_linear$Difference <- abs(result_temp_linear$Actual - result_temp_linear$Predicted) ^ 2
cat(sprintf("Linear Model: The sum of the square of difference is %f\n",sum(result_temp_linear$Difference)))
result_temp_randomForest <- cbind(temp_prediction_randomForest, as.data.frame(testset[,6]))
names(result_temp_randomForest) <- c("Predicted", "Actual")
result_temp_randomForest$Difference <- abs(result_temp_randomForest$Actual - result_temp_randomForest$Predicted) ^ 2
cat(sprintf("Random Forest Model: The sum of the square of difference is %f\n",sum(result_temp_randomForest$Difference)))
}
jj
quit
quit()
quit
}
prediction_linear <- data.frame()
testsetCopy_linear <- data.frame()
fit_linear_copy <- data.frame()
prediction_randomForest <- data.frame()
testsetCopy_randomForest <- data.frame()
fit_randomForest_copy <- data.frame()
result_temp_linear <- data.frame()
result_temp_randomForest <- data.frame()
for (i in 1:fold_num){
# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- subset(data_network_database, id %in% list[-i])
testset <- subset(data_network_database, id %in% c(i))
# run a linear regression model
fit_linear <- lm(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data=trainingset)
#fit_randomForest <- rfsrc(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 20, nodedepth = 4)
fit_randomForest <- randomForest(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 100, mtry = 6, nodesize = 64)
temp_prediction_linear <- as.data.frame(predict(fit_linear, testset[,-6]))
temp_prediction_randomForest <- as.data.frame(predict(fit_randomForest, testset[,-6]))
# append this iteration's predictions to the end of the prediction_linear data frame
prediction_linear <- rbind(prediction_linear , temp_prediction_linear)
prediction_randomForest <- rbind(prediction_randomForest , temp_prediction_randomForest)
# append this iteration's test set to the test set copy data frame
# keep only the Sepal Length Column
testsetCopy_linear <- rbind(testsetCopy_linear, as.data.frame(testset[,6]))
testsetCopy_randomForest <- rbind(testsetCopy_randomForest, as.data.frame(testset[,6]))
# fit_linear_copy <- cbind(fit_linear_copy, fit_linear)
cat("===========================================\n")
cat(sprintf("No.%d\n", i))
cat(sprintf("fit_linear coefficients:\n"))
print(fit_linear$coefficients)
result_temp_linear <- cbind(temp_prediction_linear, as.data.frame(testset[,6]))
names(result_temp_linear) <- c("Predicted", "Actual")
result_temp_linear$Difference <- abs(result_temp_linear$Actual - result_temp_linear$Predicted) ^ 2
cat(sprintf("Linear Model: The sum of the square of difference is %f\n",sum(result_temp_linear$Difference)))
result_temp_randomForest <- cbind(temp_prediction_randomForest, as.data.frame(testset[,6]))
names(result_temp_randomForest) <- c("Predicted", "Actual")
result_temp_randomForest$Difference <- abs(result_temp_randomForest$Actual - result_temp_randomForest$Predicted) ^ 2
cat(sprintf("Random Forest Model: The sum of the square of difference is %f\n",sum(result_temp_randomForest$Difference)))
}
library(randomForest)
install.packages("randomForest")
prediction_linear <- data.frame()
testsetCopy_linear <- data.frame()
fit_linear_copy <- data.frame()
prediction_randomForest <- data.frame()
testsetCopy_randomForest <- data.frame()
fit_randomForest_copy <- data.frame()
result_temp_linear <- data.frame()
result_temp_randomForest <- data.frame()
for (i in 1:fold_num){
# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- subset(data_network_database, id %in% list[-i])
testset <- subset(data_network_database, id %in% c(i))
# run a linear regression model
fit_linear <- lm(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data=trainingset)
#fit_randomForest <- rfsrc(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 20, nodedepth = 4)
fit_randomForest <- randomForest(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 100, mtry = 6, nodesize = 64)
temp_prediction_linear <- as.data.frame(predict(fit_linear, testset[,-6]))
temp_prediction_randomForest <- as.data.frame(predict(fit_randomForest, testset[,-6]))
# append this iteration's predictions to the end of the prediction_linear data frame
prediction_linear <- rbind(prediction_linear , temp_prediction_linear)
prediction_randomForest <- rbind(prediction_randomForest , temp_prediction_randomForest)
# append this iteration's test set to the test set copy data frame
# keep only the Sepal Length Column
testsetCopy_linear <- rbind(testsetCopy_linear, as.data.frame(testset[,6]))
testsetCopy_randomForest <- rbind(testsetCopy_randomForest, as.data.frame(testset[,6]))
# fit_linear_copy <- cbind(fit_linear_copy, fit_linear)
cat("===========================================\n")
cat(sprintf("No.%d\n", i))
cat(sprintf("fit_linear coefficients:\n"))
print(fit_linear$coefficients)
result_temp_linear <- cbind(temp_prediction_linear, as.data.frame(testset[,6]))
names(result_temp_linear) <- c("Predicted", "Actual")
result_temp_linear$Difference <- abs(result_temp_linear$Actual - result_temp_linear$Predicted) ^ 2
cat(sprintf("Linear Model: The sum of the square of difference is %f\n",sum(result_temp_linear$Difference)))
result_temp_randomForest <- cbind(temp_prediction_randomForest, as.data.frame(testset[,6]))
names(result_temp_randomForest) <- c("Predicted", "Actual")
result_temp_randomForest$Difference <- abs(result_temp_randomForest$Actual - result_temp_randomForest$Predicted) ^ 2
cat(sprintf("Random Forest Model: The sum of the square of difference is %f\n",sum(result_temp_randomForest$Difference)))
}
install.packages("randomForestSRC")
prediction_linear <- data.frame()
testsetCopy_linear <- data.frame()
fit_linear_copy <- data.frame()
prediction_randomForest <- data.frame()
testsetCopy_randomForest <- data.frame()
fit_randomForest_copy <- data.frame()
result_temp_linear <- data.frame()
result_temp_randomForest <- data.frame()
for (i in 1:fold_num){
# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- subset(data_network_database, id %in% list[-i])
testset <- subset(data_network_database, id %in% c(i))
# run a linear regression model
fit_linear <- lm(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data=trainingset)
#fit_randomForest <- rfsrc(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 20, nodedepth = 4)
fit_randomForest <- randomForest(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 100, mtry = 6, nodesize = 64)
temp_prediction_linear <- as.data.frame(predict(fit_linear, testset[,-6]))
temp_prediction_randomForest <- as.data.frame(predict(fit_randomForest, testset[,-6]))
# append this iteration's predictions to the end of the prediction_linear data frame
prediction_linear <- rbind(prediction_linear , temp_prediction_linear)
prediction_randomForest <- rbind(prediction_randomForest , temp_prediction_randomForest)
# append this iteration's test set to the test set copy data frame
# keep only the Sepal Length Column
testsetCopy_linear <- rbind(testsetCopy_linear, as.data.frame(testset[,6]))
testsetCopy_randomForest <- rbind(testsetCopy_randomForest, as.data.frame(testset[,6]))
# fit_linear_copy <- cbind(fit_linear_copy, fit_linear)
cat("===========================================\n")
cat(sprintf("No.%d\n", i))
cat(sprintf("fit_linear coefficients:\n"))
print(fit_linear$coefficients)
result_temp_linear <- cbind(temp_prediction_linear, as.data.frame(testset[,6]))
names(result_temp_linear) <- c("Predicted", "Actual")
result_temp_linear$Difference <- abs(result_temp_linear$Actual - result_temp_linear$Predicted) ^ 2
cat(sprintf("Linear Model: The sum of the square of difference is %f\n",sum(result_temp_linear$Difference)))
result_temp_randomForest <- cbind(temp_prediction_randomForest, as.data.frame(testset[,6]))
names(result_temp_randomForest) <- c("Predicted", "Actual")
result_temp_randomForest$Difference <- abs(result_temp_randomForest$Actual - result_temp_randomForest$Predicted) ^ 2
cat(sprintf("Random Forest Model: The sum of the square of difference is %f\n",sum(result_temp_randomForest$Difference)))
}
fold_num = 10 #Folds
# sample from 1 to fold_num, nrow times (the number of observations in the data)
data_network_database$id <- sample(1:fold_num, nrow(data_network_database), replace = TRUE)
list <- 1:fold_num
prediction_linear <- data.frame()
testsetCopy_linear <- data.frame()
fit_linear_copy <- data.frame()
prediction_randomForest <- data.frame()
testsetCopy_randomForest <- data.frame()
fit_randomForest_copy <- data.frame()
result_temp_linear <- data.frame()
result_temp_randomForest <- data.frame()
for (i in 1:fold_num){
# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- subset(data_network_database, id %in% list[-i])
testset <- subset(data_network_database, id %in% c(i))
# run a linear regression model
fit_linear <- lm(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data=trainingset)
#fit_randomForest <- rfsrc(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 20, nodedepth = 4)
fit_randomForest <- randomForest(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 100, mtry = 6, nodesize = 64)
temp_prediction_linear <- as.data.frame(predict(fit_linear, testset[,-6]))
temp_prediction_randomForest <- as.data.frame(predict(fit_randomForest, testset[,-6]))
# append this iteration's predictions to the end of the prediction_linear data frame
prediction_linear <- rbind(prediction_linear , temp_prediction_linear)
prediction_randomForest <- rbind(prediction_randomForest , temp_prediction_randomForest)
# append this iteration's test set to the test set copy data frame
# keep only the Sepal Length Column
testsetCopy_linear <- rbind(testsetCopy_linear, as.data.frame(testset[,6]))
testsetCopy_randomForest <- rbind(testsetCopy_randomForest, as.data.frame(testset[,6]))
# fit_linear_copy <- cbind(fit_linear_copy, fit_linear)
cat("===========================================\n")
cat(sprintf("No.%d\n", i))
cat(sprintf("fit_linear coefficients:\n"))
print(fit_linear$coefficients)
result_temp_linear <- cbind(temp_prediction_linear, as.data.frame(testset[,6]))
names(result_temp_linear) <- c("Predicted", "Actual")
result_temp_linear$Difference <- abs(result_temp_linear$Actual - result_temp_linear$Predicted) ^ 2
cat(sprintf("Linear Model: The sum of the square of difference is %f\n",sum(result_temp_linear$Difference)))
result_temp_randomForest <- cbind(temp_prediction_randomForest, as.data.frame(testset[,6]))
names(result_temp_randomForest) <- c("Predicted", "Actual")
result_temp_randomForest$Difference <- abs(result_temp_randomForest$Actual - result_temp_randomForest$Predicted) ^ 2
cat(sprintf("Random Forest Model: The sum of the square of difference is %f\n",sum(result_temp_randomForest$Difference)))
}
library(randomForest)
library(randomForest)
prediction_linear <- data.frame()
testsetCopy_linear <- data.frame()
fit_linear_copy <- data.frame()
prediction_randomForest <- data.frame()
testsetCopy_randomForest <- data.frame()
fit_randomForest_copy <- data.frame()
result_temp_linear <- data.frame()
result_temp_randomForest <- data.frame()
for (i in 1:fold_num){
# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- subset(data_network_database, id %in% list[-i])
testset <- subset(data_network_database, id %in% c(i))
# run a linear regression model
fit_linear <- lm(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data=trainingset)
#fit_randomForest <- rfsrc(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 20, nodedepth = 4)
fit_randomForest <- randomForest(SizeBackup ~ Week+DayOfWeek+StartTime+WorkFlowName+FileName+TimeBackup, data = trainingset, ntree = 100, mtry = 6, nodesize = 64)
temp_prediction_linear <- as.data.frame(predict(fit_linear, testset[,-6]))
temp_prediction_randomForest <- as.data.frame(predict(fit_randomForest, testset[,-6]))
# append this iteration's predictions to the end of the prediction_linear data frame
prediction_linear <- rbind(prediction_linear , temp_prediction_linear)
prediction_randomForest <- rbind(prediction_randomForest , temp_prediction_randomForest)
# append this iteration's test set to the test set copy data frame
# keep only the Sepal Length Column
testsetCopy_linear <- rbind(testsetCopy_linear, as.data.frame(testset[,6]))
testsetCopy_randomForest <- rbind(testsetCopy_randomForest, as.data.frame(testset[,6]))
# fit_linear_copy <- cbind(fit_linear_copy, fit_linear)
cat("===========================================\n")
cat(sprintf("No.%d\n", i))
cat(sprintf("fit_linear coefficients:\n"))
print(fit_linear$coefficients)
result_temp_linear <- cbind(temp_prediction_linear, as.data.frame(testset[,6]))
names(result_temp_linear) <- c("Predicted", "Actual")
result_temp_linear$Difference <- abs(result_temp_linear$Actual - result_temp_linear$Predicted) ^ 2
cat(sprintf("Linear Model: The sum of the square of difference is %f\n",sum(result_temp_linear$Difference)))
result_temp_randomForest <- cbind(temp_prediction_randomForest, as.data.frame(testset[,6]))
names(result_temp_randomForest) <- c("Predicted", "Actual")
result_temp_randomForest$Difference <- abs(result_temp_randomForest$Actual - result_temp_randomForest$Predicted) ^ 2
cat(sprintf("Random Forest Model: The sum of the square of difference is %f\n",sum(result_temp_randomForest$Difference)))
}
summary(fit_linear)
summary(fit_randomForest)
plot(fit_linear)
